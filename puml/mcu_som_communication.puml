@startuml MCU to SoM Sequence

title MCU <-> SoM (P1.3)

!pragma teoz true

autonumber "<b>[000]"
hide footbox
skinparam maxMessageSize 150

box Microcontroller Hardware #WHITE
  participant Servos as srv << (H,#EB937F) >>
  participant IMU as imu << (H,#EB937F) >>
  participant RX as rx << (H,#EB937F) >>
end box 

box Microcontroller #WHITE 
  participant Microcontroller as mcu << (C,#ADD1B2) >>
end box

box System On Module #WHITE
  participant SerialController as serial << (C,#ADD1B2) >>
  participant AutopilotManager as apm << (C,#ADD1B2) >>
  participant AutopilotInterface as api << (I,#B4A7E5) >>
  participant ManualAutopilot as map << (C,#ADD1B2) >>
  participant StabilzeAutopilot as sap << (C,#ADD1B2) >>
  participant AutopilotUtility as apu << (C,#ADD1B2) >>
end box

== Initialization ==
note over mcu, serial : Buffers are flushed
mcu -> serial ++ : Write flush string
serial -> mcu ++ : Write Handshake
serial <-- mcu  : Write Handshake

== Main Loop ==
note over mcu, serial : All implicit read calls are blocking\nand carry a time out.\nTimeout behavior is not modelled here.


rx <- mcu ++ : Read RC RX data
rx --> mcu -- : RX input data

mcu -> mcu : Compute state and stick position data

mcu -> serial : Write RxRcPacket

imu <- mcu ++ : Read IMU data
imu --> mcu -- : IMU data

mcu -> serial : Write ImuPacket data

serial -> apm ++ : Trigger
apm -> apm : Transition to correct autopilot (if necessary)

apm -> api ++ : Trigger

alt ManualAutopilot
  api -> map ++ : Trigger Impl
  map -> apu ++ : Bind all values
  apu --> map -- : Bound values
  map --> api -- : ControlSurface data
else StabilzeAutopilot
  api -> sap ++ : Trigger impl
  sap -> sap : Compute PID
  sap -> apu ++ : Bind applicable values
  apu --> sap -- : Bound values
  sap --> api -- : ControlSurface data
end

api --> apm -- : ControlSurface Data
apm --> serial -- : ControlSurface data

serial -> mcu : Write ControlSurfacePacket
mcu -> srv ++ : Write servo data

deactivate mcu
deactivate serial

@enduml
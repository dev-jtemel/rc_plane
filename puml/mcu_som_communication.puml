@startuml MCU to SoM Sequence

title MCU <-> SoM (P1.3)

!pragma teoz true

autonumber "<b>[000]"
hide footbox
skinparam maxMessageSize 150

box Microcontroller Hardware #WHITE
  participant Servos as srv << (H,#EB937F) >>
  participant IMU as imu << (H,#EB937F) >>
  participant RX as rx << (H,#EB937F) >>
end box 

box Microcontroller #WHITE 
  participant Microcontroller as mcu << (C,#ADD1B2) >>
end box

participant UART as uart << (H,#EB937F) >>

box System On Module #WHITE
  box io #WHITE
    participant SerialController as serial << (C,#ADD1B2) >>
    participant TelemetryTransmitter as ttx << (C,#ADD1B2) >>
  end box

  participant SomController as sctr << (C,#ADD1B2 ) >>

  box autopilot #WHITE
    participant AutopilotManager as apm << (C,#ADD1B2) >>
    participant AutopilotInterface as api << (I,#B4A7E5) >>
    participant ManualAutopilot as map << (C,#ADD1B2) >>
    participant StabilzeAutopilot as sap << (C,#ADD1B2) >>
    participant AutopilotUtility as apu << (C,#ADD1B2) >>
  end box
end box

== Initialization ==
note over mcu, serial : Buffers are flushed

activate mcu
activate sctr

mcu -> uart ++ : Write flush string
sctr -> serial ++ : Read flush string
serial -> uart : Read
uart --> serial : Flush string
serial --> sctr -- : Flush string

sctr -> serial ++ : Write handshake
serial -> uart : Write handshake
serial --> sctr -- : Status

mcu -> uart : Read handshake
uart --> mcu : Handshake

mcu -> uart : Write handshake

note over sctr : Attempt a few times, if fails, we exit here.

sctr -> serial ++ : Read handshake
serial -> uart : Read
uart --> serial : Handshake
serial --> sctr -- : Handshake

sctr -> sctr : Verify Handshake


== Main Loop ==
note over mcu, serial : All implicit read calls are blocking\nand carry a time out.\nTimeout behavior is not modelled here.


rx <- mcu ++ : Read RC RX data
rx --> mcu -- : RX input data

mcu -> mcu : Compute state and stick position data

mcu -> uart : Write RxRcPacket

sctr -> serial ++ : Read RxRcPacket
serial -> uart : Read
uart --> serial : RxRcPacket
serial --> sctr -- : RxRcPacket

imu <- mcu ++ : Read IMU data
imu --> mcu -- : IMU data

mcu -> uart : Write ImuPacket data

sctr -> serial ++ : Read ImuPacket
serial -> uart : Read
uart --> serial : ImuPacket
serial --> sctr -- : ImuPacket

sctr -> apm ++ : Trigger
apm -> apm : Transition to correct autopilot (if necessary)

apm -> api ++ : Trigger

alt ManualAutopilot
  api -> map ++ : Trigger Impl
  map -> apu ++ : Bind all values
  apu --> map -- : Bound values
  map --> api -- : ControlSurface data
else StabilzeAutopilot
  api -> sap ++ : Trigger impl
  sap -> sap : Compute PID
  sap -> apu ++ : Bind applicable values
  apu --> sap -- : Bound values
  sap --> api -- : ControlSurface data
end

api --> apm -- : ControlSurface Data
apm --> sctr -- : ControlSurface data

sctr -> sctr : Generate TelemetryMessages

sctr -> ttx ++ : Send Telemetry
ttx --> sctr -- : Status

sctr -> serial ++ : Write ControlSurfacePacket
serial -> uart : Write ControlSurfacePacket
serial --> sctr -- : Status

mcu -> uart : Read ControlSurfacePacket
uart --> mcu : ControlSurfacePacket

mcu -> srv ++ : Write servo data

deactivate mcu
deactivate serial

@enduml